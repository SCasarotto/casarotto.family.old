{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx","config/settings.ts","contexts/AppContext.tsx","contexts/TitleBarContext.tsx","contexts/SideNavActiveContext.tsx"],"names":["Front","lazy","Admin","App","fallback","path","component","Boolean","window","location","hostname","match","firebase","initializeApp","apiKey","settings","FIREBASE_API_KEY","authDomain","FIREBASE_AUTH_DOMAIN","databaseURL","FIREBASE_DATABASE_URL","projectId","FIREBASE_PROJECT_ID","storageBucket","FIREBASE_STORAGE_BUCKET","messagingSenderId","FIREBASE_MESSAGING_SENDER_ID","appId","FIREBASE_APP_ID","measurementId","FIREBASE_MEASUREMENT_ID","FIREBASE_PERFORMANCE","performance","analytics","Root","theme","primary","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","PRODUCTION","dev","BASE_URL","API_BASE_URL","API_DEBUGGING","STRIPE_API_KEY","VERSION","AppContext","createContext","AppProvider","props","useState","undefined","user","setUser","userLoaded","setUserLoaded","useEffect","auth","onAuthStateChanged","e","console","error","log","Provider","value","children","TitleBarContext","barTitle","setBarTitle","TitleBarProvider","SideNavActiveContext","sideNavActive","setSideNavActive","SideNavActiveProvider"],"mappings":"qUAGMA,EAAQC,gBAAK,kBAAM,qEACnBC,EAAQD,gBAAK,kBAAM,8DAEZE,EAAM,WAClB,OACC,kBAAC,WAAD,CAAUC,SAAU,+BACnB,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,UAAUC,UAAWJ,IACjC,kBAAC,IAAD,CAAOG,KAAK,IAAIC,UAAWN,OCCXO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCINC,IAASC,cAAc,CACtBC,OAAQC,IAASC,iBACjBC,WAAYF,IAASG,qBACrBC,YAAaJ,IAASK,sBACtBC,UAAWN,IAASO,oBACpBC,cAAeR,IAASS,wBACxBC,kBAAmBV,IAASW,6BAC5BC,MAAOZ,IAASa,gBAChBC,cAAed,IAASe,0BAErBf,IAASgB,uBACZnB,IAASoB,cACTpB,IAASqB,aAGV,IAAMC,EAAO,WACZ,OACC,kBAAC,IAAD,CAAcC,MAAO,CAAEC,QAAS,YAC/B,kBAAC,IAAD,KACC,kBAAC,IAAD,KACC,kBAAC,IAAD,KACC,kBAAC,EAAD,WAONC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDyF5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,8EE3FbC,GATW,aAChBC,KAAK,EACLC,SAAU,wBACVC,aAhB4B,4BAiB5BC,eAAe,EACfpB,sBAAsB,EACtBqB,eAb0B,8CA9BJ,CACtBpC,iBAAkB,0CAClBE,qBAAsB,qCACtBE,sBAAuB,4CACvBE,oBAAqB,qBACrBE,wBAAyB,iCACzBE,6BAA8B,eAC9BE,gBAAiB,4CACjBE,wBAAyB,iBAsCV,aACfkB,KAAK,EACLC,SAAU,gCACVC,aAxB2B,4BAyB3BC,eAAe,EACfpB,sBAAsB,EACtBqB,eArByB,8CArBJ,CACrBpC,iBAAkB,0CAClBE,qBAAsB,sCACtBE,sBAAuB,6CACvBE,oBAAqB,sBACrBE,wBAAyB,kCACzBE,6BAA8B,eAC9BE,gBAAiB,4CACjBE,wBAAyB,kBAsCbf,EAAQ,aACpBsC,QAAS,SAIkDN,I,iJCxD/CO,G,cAAaC,wBAA8B,KAE3CC,EAAwB,SAACC,GAAW,IAAD,EACvBC,wBAA2BC,GADJ,mBACxCC,EADwC,KAClCC,EADkC,OAEXH,oBAAS,GAFE,mBAExCI,EAFwC,KAE5BC,EAF4B,KAwB/C,OApBAC,qBAAU,WACTpD,IAASqD,OAAOC,oBACf,SAACN,GACIA,GACHC,EAAQD,GACRG,GAAc,KAEdF,OAAQF,GACRI,GAAc,OAGhB,SAACI,GACAC,QAAQC,MAAMF,GACdN,OAAQF,GACRI,GAAc,MAEf,kBAAMK,QAAQE,IAAI,qCAEjB,IAGF,kBAAChB,EAAWiB,SAAZ,CACCC,MAAO,CACNZ,OACAE,eAGAL,EAAMgB,Y,wOCpCGC,EAAkBnB,wBAA+B,CAC7DoB,SAAU,GACVC,YAAa,eAGDC,EAA6B,SAACpB,GAAW,IAAD,EACpBC,mBAAS,IADW,mBAC7CiB,EAD6C,KACnCC,EADmC,KAEpD,OACC,kBAACF,EAAgBH,SAAjB,CAA0BC,MAAO,CAAEG,WAAUC,gBAC3CnB,EAAMgB,YCTGK,EAAuBvB,wBAA6B,CAChEwB,eAAe,EACfC,iBAAkB,eAGNC,EAAkC,SAACxB,GAAW,IAAD,EACfC,oBAAS,GADM,mBAClDqB,EADkD,KACnCC,EADmC,KAGzD,OACC,kBAACF,EAAqBP,SAAtB,CAA+BC,MAAO,CAAEO,gBAAeC,qBACrDvB,EAAMgB,Y","file":"static/js/main.f28c0e9b.chunk.js","sourcesContent":["import React, { Suspense, lazy } from 'react'\nimport { Route, Switch } from 'react-router-dom'\n\nconst Front = lazy(() => import('layout/front/ContentWrapper'))\nconst Admin = lazy(() => import('layout/admin/ContentWrapper'))\n\nexport const App = () => {\n\treturn (\n\t\t<Suspense fallback={<div />}>\n\t\t\t<Switch>\n\t\t\t\t<Route path='/admin/' component={Admin} />\n\t\t\t\t<Route path='/' component={Front} />\n\t\t\t</Switch>\n\t\t</Suspense>\n\t)\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { TEAppWrapper } from 'react-tec'\nimport firebase from 'firebase/app'\nimport 'firebase/performance'\nimport 'firebase/analytics'\n\nimport { settings } from 'config/settings'\n\nimport 'slick-carousel/slick/slick.css'\nimport 'slick-carousel/slick/slick-theme.css'\nimport 'rc-pagination/assets/index.css'\nimport 'react-table/react-table.css'\nimport 'tippy.js/dist/tippy.css'\n\nimport './index.css'\n\nimport { App } from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { SideNavActiveProvider, TitleBarProvider } from 'contexts'\nimport { AppProvider } from 'contexts/AppContext'\n\nfirebase.initializeApp({\n\tapiKey: settings.FIREBASE_API_KEY,\n\tauthDomain: settings.FIREBASE_AUTH_DOMAIN,\n\tdatabaseURL: settings.FIREBASE_DATABASE_URL,\n\tprojectId: settings.FIREBASE_PROJECT_ID,\n\tstorageBucket: settings.FIREBASE_STORAGE_BUCKET,\n\tmessagingSenderId: settings.FIREBASE_MESSAGING_SENDER_ID,\n\tappId: settings.FIREBASE_APP_ID,\n\tmeasurementId: settings.FIREBASE_MEASUREMENT_ID,\n})\nif (settings.FIREBASE_PERFORMANCE) {\n\tfirebase.performance()\n\tfirebase.analytics()\n}\n\nconst Root = () => {\n\treturn (\n\t\t<TEAppWrapper theme={{ primary: '#5a2d36' }}>\n\t\t\t<AppProvider>\n\t\t\t\t<SideNavActiveProvider>\n\t\t\t\t\t<TitleBarProvider>\n\t\t\t\t\t\t<App />\n\t\t\t\t\t</TitleBarProvider>\n\t\t\t\t</SideNavActiveProvider>\n\t\t\t</AppProvider>\n\t\t</TEAppWrapper>\n\t)\n}\nReactDOM.render(<Root />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","//\n// Firebase\n//\n\nconst DEVELOPMENT_FB = {\n\tFIREBASE_API_KEY: 'AIzaSyBURLD7PWwSweHE7zAzDBHorAPpNksuv2Y',\n\tFIREBASE_AUTH_DOMAIN: 'family-website-dev.firebaseapp.com',\n\tFIREBASE_DATABASE_URL: 'https://family-website-dev.firebaseio.com',\n\tFIREBASE_PROJECT_ID: 'family-website-dev',\n\tFIREBASE_STORAGE_BUCKET: 'family-website-dev.appspot.com',\n\tFIREBASE_MESSAGING_SENDER_ID: '684799561699',\n\tFIREBASE_APP_ID: '1:684799561699:web:d8e1eb29214aa6caea1ad6',\n\tFIREBASE_MEASUREMENT_ID: 'G-06QDEPMF6G',\n}\nconst PRODUCTION_FB = {\n\tFIREBASE_API_KEY: 'AIzaSyB_ErUrBQqlPiQ2vrVi5ySvSkVXOiTNt1Y',\n\tFIREBASE_AUTH_DOMAIN: 'family-website-prod.firebaseapp.com',\n\tFIREBASE_DATABASE_URL: 'https://family-website-prod.firebaseio.com',\n\tFIREBASE_PROJECT_ID: 'family-website-prod',\n\tFIREBASE_STORAGE_BUCKET: 'family-website-prod.appspot.com',\n\tFIREBASE_MESSAGING_SENDER_ID: '934338417987',\n\tFIREBASE_APP_ID: '1:934338417987:web:dcc77ae7b605a636e48bf6',\n\tFIREBASE_MEASUREMENT_ID: 'G-ZKJZMW8WE4',\n}\n\n//\n// API URL\n//\nconst DEVELOPMENT_API_BASE = 'http://localhost:5001/api'\nconst PRODUCTION_API_BASE = 'http://localhost:5001/api'\n\n//\n// Stripe\n//\nconst DEVELOPMENT_STRIPE = 'pk_test_zRxOPqNPQQzWt4n7nGJTBwR000IXITGuLN'\nconst PRODUCTION_STRIPE = 'pk_test_zRxOPqNPQQzWt4n7nGJTBwR000IXITGuLN'\n// const PRODUCTION_STRIPE = 'pk_live_wXjQNqvOMfTPwM7UMnDqlvDv00uVNsGHWs'\n\n//\n// Configurations\n//\nconst DEVELOPMENT = {\n\tdev: true,\n\tBASE_URL: 'http://localhost:9999',\n\tAPI_BASE_URL: DEVELOPMENT_API_BASE,\n\tAPI_DEBUGGING: true,\n\tFIREBASE_PERFORMANCE: false,\n\tSTRIPE_API_KEY: DEVELOPMENT_STRIPE,\n\t...DEVELOPMENT_FB,\n}\nconst PRODUCTION = {\n\tdev: false,\n\tBASE_URL: 'https://stuartandcourtney.com',\n\tAPI_BASE_URL: PRODUCTION_API_BASE,\n\tAPI_DEBUGGING: false,\n\tFIREBASE_PERFORMANCE: true,\n\tSTRIPE_API_KEY: PRODUCTION_STRIPE,\n\t...PRODUCTION_FB,\n}\n\nexport const settings = {\n\tVERSION: '0.1.0',\n\n\t// ...DEVELOPMENT,\n\t// ...PRODUCTION,\n\t...(process.env.NODE_ENV === 'development' ? DEVELOPMENT : PRODUCTION),\n}\n","import React, { createContext, useState, useEffect } from 'react'\nimport firebase, { User } from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\n\ninterface AppContextData {\n\tuser?: User\n\tuserLoaded?: boolean\n}\nexport const AppContext = createContext<AppContextData>({})\n\nexport const AppProvider: React.FC = (props) => {\n\tconst [user, setUser] = useState<User | undefined>(undefined)\n\tconst [userLoaded, setUserLoaded] = useState(false)\n\n\tuseEffect(() => {\n\t\tfirebase.auth().onAuthStateChanged(\n\t\t\t(user) => {\n\t\t\t\tif (user) {\n\t\t\t\t\tsetUser(user)\n\t\t\t\t\tsetUserLoaded(true)\n\t\t\t\t} else {\n\t\t\t\t\tsetUser(undefined)\n\t\t\t\t\tsetUserLoaded(true)\n\t\t\t\t}\n\t\t\t},\n\t\t\t(e) => {\n\t\t\t\tconsole.error(e)\n\t\t\t\tsetUser(undefined)\n\t\t\t\tsetUserLoaded(true)\n\t\t\t},\n\t\t\t() => console.log('onAuthStateChanged Completed'),\n\t\t)\n\t}, [])\n\n\treturn (\n\t\t<AppContext.Provider\n\t\t\tvalue={{\n\t\t\t\tuser,\n\t\t\t\tuserLoaded,\n\t\t\t}}\n\t\t>\n\t\t\t{props.children}\n\t\t</AppContext.Provider>\n\t)\n}\n","import React, { createContext, useState } from 'react'\n\ninterface TitleBarContext {\n\tbarTitle: string\n\tsetBarTitle: React.Dispatch<React.SetStateAction<string>>\n}\nexport const TitleBarContext = createContext<TitleBarContext>({\n\tbarTitle: '',\n\tsetBarTitle: () => {},\n})\n\nexport const TitleBarProvider: React.FC = (props) => {\n\tconst [barTitle, setBarTitle] = useState('')\n\treturn (\n\t\t<TitleBarContext.Provider value={{ barTitle, setBarTitle }}>\n\t\t\t{props.children}\n\t\t</TitleBarContext.Provider>\n\t)\n}\n","import React, { createContext, useState } from 'react'\n\ninterface SideNavActive {\n\tsideNavActive: boolean\n\tsetSideNavActive: React.Dispatch<React.SetStateAction<boolean>>\n}\nexport const SideNavActiveContext = createContext<SideNavActive>({\n\tsideNavActive: false,\n\tsetSideNavActive: () => {},\n})\n\nexport const SideNavActiveProvider: React.FC = (props) => {\n\tconst [sideNavActive, setSideNavActive] = useState(true)\n\n\treturn (\n\t\t<SideNavActiveContext.Provider value={{ sideNavActive, setSideNavActive }}>\n\t\t\t{props.children}\n\t\t</SideNavActiveContext.Provider>\n\t)\n}\n"],"sourceRoot":""}