{"ast":null,"code":"// This is a port of Google Android `libphonenumber`'s\n// `phonenumberutil.js` of December 31th, 2018.\n//\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\nimport { VALID_DIGITS, VALID_PUNCTUATION, PLUS_CHARS, MIN_LENGTH_FOR_NSN, MAX_LENGTH_FOR_NSN, MAX_LENGTH_COUNTRY_CODE } from './constants';\nimport { matchesEntirely } from './util';\nimport ParseError from './ParseError';\nimport Metadata from './metadata';\nimport isViablePhoneNumber from './isViablePhoneNumber';\nimport { extractExtension } from './extension';\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber';\nimport getCountryCallingCode from './getCountryCallingCode';\nimport getNumberType, { checkNumberLengthForType } from './getNumberType_';\nimport { isPossibleNumber } from './isPossibleNumber_';\nimport { stripIDDPrefix } from './IDD';\nimport { parseRFC3966 } from './RFC3966';\nimport PhoneNumber from './PhoneNumber'; // We don't allow input strings for parsing to be longer than 250 chars.\n// This prevents malicious input from consuming CPU.\n\nvar MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.\n\nvar PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.\n\nvar AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$');\nvar USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // `options`:\n//  {\n//    country:\n//    {\n//      restrict - (a two-letter country code)\n//                 the phone number must be in this country\n//\n//      default - (a two-letter country code)\n//                default country to use for phone number parsing and validation\n//                (if no country code could be derived from the phone number)\n//    }\n//  }\n//\n// Returns `{ country, number }`\n//\n// Example use cases:\n//\n// ```js\n// parse('8 (800) 555-35-35', 'RU')\n// parse('8 (800) 555-35-35', 'RU', metadata)\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\n// parse('+7 800 555 35 35')\n// parse('+7 800 555 35 35', metadata)\n// ```\n//\n\nexport default function parse(text, options, metadata) {\n  // If assigning the `{}` default value is moved to the arguments above,\n  // code coverage would decrease for some weird reason.\n  options = options || {};\n  metadata = new Metadata(metadata); // Validate `defaultCountry`.\n\n  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    throw new Error(\"Unknown country: \".concat(options.defaultCountry));\n  } // Parse the phone number.\n\n\n  var _parseInput = parseInput(text, options.v2),\n      formattedPhoneNumber = _parseInput.number,\n      ext = _parseInput.ext; // If the phone number is not viable then return nothing.\n\n\n  if (!formattedPhoneNumber) {\n    if (options.v2) {\n      throw new ParseError('NOT_A_NUMBER');\n    }\n\n    return {};\n  }\n\n  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),\n      country = _parsePhoneNumber.country,\n      nationalNumber = _parsePhoneNumber.nationalNumber,\n      countryCallingCode = _parsePhoneNumber.countryCallingCode,\n      carrierCode = _parsePhoneNumber.carrierCode;\n\n  if (!metadata.hasSelectedNumberingPlan()) {\n    if (options.v2) {\n      throw new ParseError('INVALID_COUNTRY');\n    }\n\n    return {};\n  } // Validate national (significant) number length.\n\n\n  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\n    // Won't throw here because the regexp already demands length > 1.\n\n    /* istanbul ignore if */\n    if (options.v2) {\n      throw new ParseError('TOO_SHORT');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  } // Validate national (significant) number length.\n  //\n  // A sidenote:\n  //\n  // They say that sometimes national (significant) numbers\n  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\n  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\n  // Such numbers will just be discarded.\n  //\n\n\n  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\n    if (options.v2) {\n      throw new ParseError('TOO_LONG');\n    } // Google's demo just throws an error in this case.\n\n\n    return {};\n  }\n\n  if (options.v2) {\n    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);\n\n    if (country) {\n      phoneNumber.country = country;\n    }\n\n    if (carrierCode) {\n      phoneNumber.carrierCode = carrierCode;\n    }\n\n    if (ext) {\n      phoneNumber.ext = ext;\n    }\n\n    return phoneNumber;\n  } // Check if national phone number pattern matches the number.\n  // National number pattern is different for each country,\n  // even for those ones which are part of the \"NANPA\" group.\n\n\n  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;\n\n  if (!options.extended) {\n    return valid ? result(country, nationalNumber, ext) : {};\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    carrierCode: carrierCode,\n    valid: valid,\n    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, countryCallingCode !== undefined, metadata) ? true : false,\n    phone: nationalNumber,\n    ext: ext\n  };\n}\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\n\nexport function extractFormattedPhoneNumber(text, v2) {\n  if (!text) {\n    return;\n  }\n\n  if (text.length > MAX_INPUT_STRING_LENGTH) {\n    if (v2) {\n      throw new ParseError('TOO_LONG');\n    }\n\n    return;\n  } // Attempt to extract a possible number from the string passed in\n\n\n  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);\n\n  if (startsAt < 0) {\n    return;\n  }\n\n  return text // Trim everything to the left of the phone number\n  .slice(startsAt) // Remove trailing non-numerical characters\n  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');\n}\n/**\r\n * Strips any national prefix (such as 0, 1) present in the number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ number, carrierCode }`.\r\n */\n\nexport function stripNationalPrefixAndCarrierCode(number, metadata) {\n  if (!number) {\n    return {\n      number: number\n    };\n  }\n\n  if (!metadata.nationalPrefixForParsing()) {\n    return {\n      number: number\n    };\n  } // See METADATA.md for the description of\n  // `national_prefix_for_parsing` and `national_prefix_transform_rule`.\n  // Attempt to parse the first digits as a national prefix.\n\n\n  var prefixPattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')');\n  var prefixMatch = prefixPattern.exec(number);\n\n  if (!prefixMatch) {\n    return {\n      number: number\n    };\n  }\n\n  var nationalSignificantNumber;\n  var carrierCode; // If a \"capturing group\" didn't match\n  // then its element in `prefixMatch[]` array will be `undefined`.\n\n  var capturedGroupsCount = prefixMatch.length - 1;\n\n  if (metadata.nationalPrefixTransformRule() && capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount]) {\n    nationalSignificantNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // Carrier code is the last captured group,\n    // but only when there's more than one captured group.\n\n    if (capturedGroupsCount > 1 && prefixMatch[capturedGroupsCount]) {\n      carrierCode = prefixMatch[1];\n    }\n  } // If it's a simple-enough case then just\n  // strip the national prefix from the number.\n  else {\n      // National prefix is the whole substring matched by\n      // the `national_prefix_for_parsing` regexp.\n      var nationalPrefix = prefixMatch[0];\n      nationalSignificantNumber = number.slice(nationalPrefix.length); // Carrier code is the last captured group.\n\n      if (capturedGroupsCount > 0) {\n        carrierCode = prefixMatch[1];\n      }\n    } // The following is done in `get_country_and_national_number_for_local_number()` instead.\n  //\n  // // Verify the parsed national (significant) number for this country\n  // const national_number_rule = new RegExp(metadata.nationalNumberPattern())\n  // //\n  // // If the original number (before stripping national prefix) was viable,\n  // // and the resultant number is not, then prefer the original phone number.\n  // // This is because for some countries (e.g. Russia) the same digit could be both\n  // // a national prefix and a leading digit of a valid national phone number,\n  // // like `8` is the national prefix for Russia and both\n  // // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n  // if (matchesEntirely(number, national_number_rule) &&\n  // \t!matchesEntirely(nationalSignificantNumber, national_number_rule)) {\n  // \treturn number\n  // }\n  // Return the parsed national (significant) number\n\n\n  return {\n    number: nationalSignificantNumber,\n    carrierCode: carrierCode\n  };\n}\nexport function findCountryCode(callingCode, nationalPhoneNumber, metadata) {\n  /* istanbul ignore if */\n  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n    if (metadata.isNonGeographicCallingCode(callingCode)) {\n      return '001';\n    }\n  } // Is always non-empty, because `callingCode` is always valid\n\n\n  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);\n\n  if (!possibleCountries) {\n    return;\n  } // If there's just one country corresponding to the country code,\n  // then just return it, without further phone number digits validation.\n\n\n  if (possibleCountries.length === 1) {\n    return possibleCountries[0];\n  }\n\n  return _findCountryCode(possibleCountries, nationalPhoneNumber, metadata.metadata);\n} // Changes `metadata` `country`.\n\nfunction _findCountryCode(possibleCountries, nationalPhoneNumber, metadata) {\n  metadata = new Metadata(metadata);\n\n  for (var _iterator = possibleCountries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var country = _ref;\n    metadata.country(country); // Leading digits check would be the simplest one\n\n    if (metadata.leadingDigits()) {\n      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\n        return country;\n      }\n    } // Else perform full validation with all of those\n    // fixed-line/mobile/etc regular expressions.\n    else if (getNumberType({\n        phone: nationalPhoneNumber,\n        country: country\n      }, undefined, metadata.metadata)) {\n        return country;\n      }\n  }\n}\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\n\n\nfunction parseInput(text, v2) {\n  // Parse RFC 3966 phone number URI.\n  if (text && text.indexOf('tel:') === 0) {\n    return parseRFC3966(text);\n  }\n\n  var number = extractFormattedPhoneNumber(text, v2); // If the phone number is not viable, then abort.\n\n  if (!number || !isViablePhoneNumber(number)) {\n    return {};\n  } // Attempt to parse extension first, since it doesn't require region-specific\n  // data and we want to have the non-normalised number here.\n\n\n  var with_extension_stripped = extractExtension(number);\n\n  if (with_extension_stripped.ext) {\n    return with_extension_stripped;\n  }\n\n  return {\n    number: number\n  };\n}\n/**\r\n * Creates `parse()` result object.\r\n */\n\n\nfunction result(country, national_number, ext) {\n  var result = {\n    country: country,\n    phone: national_number\n  };\n\n  if (ext) {\n    result.ext = ext;\n  }\n\n  return result;\n}\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\n\n\nfunction parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {\n  var _extractCountryCallin = extractCountryCallingCode(formattedPhoneNumber, defaultCountry, metadata.metadata),\n      countryCallingCode = _extractCountryCallin.countryCallingCode,\n      number = _extractCountryCallin.number;\n\n  var country;\n\n  if (countryCallingCode) {\n    metadata.chooseCountryByCountryCallingCode(countryCallingCode);\n  } // If `formattedPhoneNumber` is in \"national\" format\n  // then `number` is defined and `countryCallingCode` isn't.\n  else if (number && (defaultCountry || defaultCallingCode)) {\n      metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);\n\n      if (defaultCountry) {\n        country = defaultCountry;\n      } else {\n        /* istanbul ignore if */\n        if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\n          if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\n            country = '001';\n          }\n        }\n      }\n\n      countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);\n    } else return {};\n\n  if (!number) {\n    return {\n      countryCallingCode: countryCallingCode\n    };\n  }\n\n  var _parseNationalNumber = parseNationalNumber(number, metadata),\n      nationalNumber = _parseNationalNumber.nationalNumber,\n      carrierCode = _parseNationalNumber.carrierCode; // Sometimes there are several countries\n  // corresponding to the same country phone code\n  // (e.g. NANPA countries all having `1` country phone code).\n  // Therefore, to reliably determine the exact country,\n  // national (significant) number should have been parsed first.\n  //\n  // When `metadata.json` is generated, all \"ambiguous\" country phone codes\n  // get their countries populated with the full set of\n  // \"phone number type\" regular expressions.\n  //\n\n\n  var exactCountry = findCountryCode(countryCallingCode, nationalNumber, metadata);\n\n  if (exactCountry) {\n    country = exactCountry;\n    /* istanbul ignore if */\n\n    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\n      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\n      // then remove the \"istanbul ignore if\".\n    } else {\n      metadata.country(country);\n    }\n  }\n\n  return {\n    country: country,\n    countryCallingCode: countryCallingCode,\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n}\n\nfunction parseNationalNumber(number, metadata) {\n  var nationalNumber = parseIncompletePhoneNumber(number);\n  var carrierCode; // Parsing national prefixes and carrier codes\n  // is only required for local phone numbers\n  // but some people don't understand that\n  // and sometimes write international phone numbers\n  // with national prefixes (or maybe even carrier codes).\n  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\n  // Google's original library forgives such mistakes\n  // and so does this library, because it has been requested:\n  // https://github.com/catamphetamine/libphonenumber-js/issues/127\n\n  var _stripNationalPrefixA = stripNationalPrefixAndCarrierCode(nationalNumber, metadata),\n      potentialNationalNumber = _stripNationalPrefixA.number,\n      potentialCarrierCode = _stripNationalPrefixA.carrierCode; // If metadata has \"possible lengths\" then employ the new algorythm.\n\n\n  if (metadata.possibleLengths()) {\n    // We require that the NSN remaining after stripping the national prefix and\n    // carrier code be long enough to be a possible length for the region.\n    // Otherwise, we don't do the stripping, since the original number could be\n    // a valid short number.\n    switch (checkNumberLengthForType(potentialNationalNumber, undefined, metadata)) {\n      case 'TOO_SHORT': // case 'IS_POSSIBLE_LOCAL_ONLY':\n\n      case 'INVALID_LENGTH':\n        break;\n\n      default:\n        nationalNumber = potentialNationalNumber;\n        carrierCode = potentialCarrierCode;\n    }\n  } else {\n    // If the original number (before stripping national prefix) was viable,\n    // and the resultant number is not, then prefer the original phone number.\n    // This is because for some countries (e.g. Russia) the same digit could be both\n    // a national prefix and a leading digit of a valid national phone number,\n    // like `8` is the national prefix for Russia and both\n    // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\n    if (matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && !matchesEntirely(potentialNationalNumber, metadata.nationalNumberPattern())) {// Keep the number without stripping national prefix.\n    } else {\n      nationalNumber = potentialNationalNumber;\n      carrierCode = potentialCarrierCode;\n    }\n  }\n\n  return {\n    nationalNumber: nationalNumber,\n    carrierCode: carrierCode\n  };\n} // Parses a formatted phone number\n// and returns `{ countryCallingCode, number }`\n// where `number` is just the \"number\" part\n// which is left after extracting `countryCallingCode`\n// and is not necessarily a \"national (significant) number\"\n// and might as well contain national prefix.\n//\n\n\nexport function extractCountryCallingCode(number, country, metadata) {\n  number = parseIncompletePhoneNumber(number);\n\n  if (!number) {\n    return {};\n  } // If this is not an international phone number,\n  // then don't extract country phone code.\n\n\n  if (number[0] !== '+') {\n    // Convert an \"out-of-country\" dialing phone number\n    // to a proper international phone number.\n    var numberWithoutIDD = stripIDDPrefix(number, country, metadata); // If an IDD prefix was stripped then\n    // convert the number to international one\n    // for subsequent parsing.\n\n    if (numberWithoutIDD && numberWithoutIDD !== number) {\n      number = '+' + numberWithoutIDD;\n    } else {\n      return {\n        number: number\n      };\n    }\n  } // Fast abortion: country codes do not begin with a '0'\n\n\n  if (number[1] === '0') {\n    return {};\n  }\n\n  metadata = new Metadata(metadata); // The thing with country phone codes\n  // is that they are orthogonal to each other\n  // i.e. there's no such country phone code A\n  // for which country phone code B exists\n  // where B starts with A.\n  // Therefore, while scanning digits,\n  // if a valid country code is found,\n  // that means that it is the country code.\n  //\n\n  var i = 2;\n\n  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\n    var countryCallingCode = number.slice(1, i);\n\n    if (metadata.hasCallingCode(countryCallingCode)) {\n      return {\n        countryCallingCode: countryCallingCode,\n        number: number.slice(i)\n      };\n    }\n\n    i++;\n  }\n\n  return {};\n}","map":{"version":3,"sources":["../source/parse_.js"],"names":["MAX_INPUT_STRING_LENGTH","PHONE_NUMBER_START_PATTERN","AFTER_PHONE_NUMBER_END_PATTERN","USE_NON_GEOGRAPHIC_COUNTRY_CODE","options","metadata","formattedPhoneNumber","ext","parseInput","country","nationalNumber","countryCallingCode","carrierCode","parsePhoneNumber","phoneNumber","valid","matchesEntirely","result","possible","isPossibleNumber","phone","text","startsAt","number","prefixPattern","prefixMatch","capturedGroupsCount","nationalSignificantNumber","nationalPrefix","possibleCountries","_findCountryCode","nationalPhoneNumber","getNumberType","parseRFC3966","extractFormattedPhoneNumber","isViablePhoneNumber","with_extension_stripped","extractExtension","national_number","extractCountryCallingCode","defaultCountry","defaultCallingCode","getCountryCallingCode","parseNationalNumber","exactCountry","findCountryCode","parseIncompletePhoneNumber","potentialNationalNumber","potentialCarrierCode","stripNationalPrefixAndCarrierCode","checkNumberLengthForType","numberWithoutIDD","stripIDDPrefix","i"],"mappings":"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","sourcesContent":["// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS,\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_COUNTRY_CODE\r\n} from './constants'\r\n\r\nimport { matchesEntirely } from './util'\r\nimport ParseError from './ParseError'\r\nimport Metadata from './metadata'\r\nimport isViablePhoneNumber from './isViablePhoneNumber'\r\nimport { extractExtension } from './extension'\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'\r\nimport getCountryCallingCode from './getCountryCallingCode'\r\nimport getNumberType, { checkNumberLengthForType } from './getNumberType_'\r\nimport { isPossibleNumber } from './isPossibleNumber_'\r\nimport { stripIDDPrefix } from './IDD'\r\nimport { parseRFC3966 } from './RFC3966'\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\n// We don't allow input strings for parsing to be longer than 250 chars.\r\n// This prevents malicious input from consuming CPU.\r\nconst MAX_INPUT_STRING_LENGTH = 250\r\n\r\n// This consists of the plus symbol, digits, and arabic-indic digits.\r\nconst PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']')\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\nconst AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$')\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\n// `options`:\r\n//  {\r\n//    country:\r\n//    {\r\n//      restrict - (a two-letter country code)\r\n//                 the phone number must be in this country\r\n//\r\n//      default - (a two-letter country code)\r\n//                default country to use for phone number parsing and validation\r\n//                (if no country code could be derived from the phone number)\r\n//    }\r\n//  }\r\n//\r\n// Returns `{ country, number }`\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// parse('8 (800) 555-35-35', 'RU')\r\n// parse('8 (800) 555-35-35', 'RU', metadata)\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\r\n// parse('+7 800 555 35 35')\r\n// parse('+7 800 555 35 35', metadata)\r\n// ```\r\n//\r\nexport default function parse(text, options, metadata) {\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// Validate `defaultCountry`.\r\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\tthrow new Error(`Unknown country: ${options.defaultCountry}`)\r\n\t}\r\n\r\n\t// Parse the phone number.\r\n\tconst { number: formattedPhoneNumber, ext } = parseInput(text, options.v2)\r\n\r\n\t// If the phone number is not viable then return nothing.\r\n\tif (!formattedPhoneNumber) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('NOT_A_NUMBER')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst {\r\n\t\tcountry,\r\n\t\tnationalNumber,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode\r\n\t} = parsePhoneNumber(\r\n\t\tformattedPhoneNumber,\r\n\t\toptions.defaultCountry,\r\n\t\toptions.defaultCallingCode,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (!metadata.hasSelectedNumberingPlan()) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\tif (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\r\n\t\t// Won't throw here because the regexp already demands length > 1.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\t//\r\n\t// A sidenote:\r\n\t//\r\n\t// They say that sometimes national (significant) numbers\r\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\r\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\r\n\t// Such numbers will just be discarded.\r\n\t//\r\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\tif (options.v2) {\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountryCallingCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tmetadata.metadata\r\n\t\t)\r\n\t\tif (country) {\r\n\t\t\tphoneNumber.country = country\r\n\t\t}\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\tif (ext) {\r\n\t\t\tphoneNumber.ext = ext\r\n\t\t}\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t// Check if national phone number pattern matches the number.\r\n\t// National number pattern is different for each country,\r\n\t// even for those ones which are part of the \"NANPA\" group.\r\n\tconst valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ?\r\n\t\tmatchesEntirely(nationalNumber, metadata.nationalNumberPattern()) :\r\n\t\tfalse\r\n\r\n\tif (!options.extended) {\r\n\t\treturn valid ? result(country, nationalNumber, ext) : {}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode,\r\n\t\tvalid,\r\n\t\tpossible: valid ? true : (\r\n\t\t\toptions.extended === true &&\r\n\t\t\tmetadata.possibleLengths() &&\r\n\t\t\tisPossibleNumber(nationalNumber, countryCallingCode !== undefined, metadata) ? true : false\r\n\t\t),\r\n\t\tphone: nationalNumber,\r\n\t\text\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\r\nexport function extractFormattedPhoneNumber(text, v2) {\r\n\tif (!text) {\r\n\t\treturn\r\n\t}\r\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\r\n\t\tif (v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\t// Attempt to extract a possible number from the string passed in\r\n\tconst startsAt = text.search(PHONE_NUMBER_START_PATTERN)\r\n\tif (startsAt < 0) {\r\n\t\treturn\r\n\t}\r\n\treturn text\r\n\t\t// Trim everything to the left of the phone number\r\n\t\t.slice(startsAt)\r\n\t\t// Remove trailing non-numerical characters\r\n\t\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '')\r\n}\r\n\r\n/**\r\n * Strips any national prefix (such as 0, 1) present in the number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ number, carrierCode }`.\r\n */\r\nexport function stripNationalPrefixAndCarrierCode(number, metadata) {\r\n\tif (!number) {\r\n\t\treturn { number }\r\n\t}\r\n\r\n\tif (!metadata.nationalPrefixForParsing()) {\r\n\t\treturn { number }\r\n\t}\r\n\r\n\t// See METADATA.md for the description of\r\n\t// `national_prefix_for_parsing` and `national_prefix_transform_rule`.\r\n\r\n\t// Attempt to parse the first digits as a national prefix.\r\n\tconst prefixPattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')')\r\n\tconst prefixMatch = prefixPattern.exec(number)\r\n\r\n\tif (!prefixMatch) {\r\n\t\treturn { number }\r\n\t}\r\n\r\n\tlet nationalSignificantNumber\r\n\tlet carrierCode\r\n\r\n\t// If a \"capturing group\" didn't match\r\n\t// then its element in `prefixMatch[]` array will be `undefined`.\r\n\r\n\tconst capturedGroupsCount = prefixMatch.length - 1\r\n\tif (metadata.nationalPrefixTransformRule() &&\r\n\t\tcapturedGroupsCount > 0 && prefixMatch[capturedGroupsCount]) {\r\n\t\tnationalSignificantNumber = number.replace(\r\n\t\t\tprefixPattern,\r\n\t\t\tmetadata.nationalPrefixTransformRule()\r\n\t\t)\r\n\t\t// Carrier code is the last captured group,\r\n\t\t// but only when there's more than one captured group.\r\n\t\tif (capturedGroupsCount > 1 && prefixMatch[capturedGroupsCount]) {\r\n\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t}\r\n\t}\r\n\t// If it's a simple-enough case then just\r\n\t// strip the national prefix from the number.\r\n\telse {\r\n\t\t// National prefix is the whole substring matched by\r\n\t\t// the `national_prefix_for_parsing` regexp.\r\n\t\tconst nationalPrefix = prefixMatch[0]\r\n\t\tnationalSignificantNumber = number.slice(nationalPrefix.length)\r\n\t\t// Carrier code is the last captured group.\r\n\t\tif (capturedGroupsCount > 0) {\r\n\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t}\r\n\t}\r\n\r\n\t// The following is done in `get_country_and_national_number_for_local_number()` instead.\r\n\t//\r\n\t// // Verify the parsed national (significant) number for this country\r\n\t// const national_number_rule = new RegExp(metadata.nationalNumberPattern())\r\n\t// //\r\n\t// // If the original number (before stripping national prefix) was viable,\r\n\t// // and the resultant number is not, then prefer the original phone number.\r\n\t// // This is because for some countries (e.g. Russia) the same digit could be both\r\n\t// // a national prefix and a leading digit of a valid national phone number,\r\n\t// // like `8` is the national prefix for Russia and both\r\n\t// // `8 800 555 35 35` and `800 555 35 35` are valid numbers.\r\n\t// if (matchesEntirely(number, national_number_rule) &&\r\n\t// \t!matchesEntirely(nationalSignificantNumber, national_number_rule)) {\r\n\t// \treturn number\r\n\t// }\r\n\r\n\t// Return the parsed national (significant) number\r\n   return {\r\n   \tnumber: nationalSignificantNumber,\r\n   \tcarrierCode\r\n   }\r\n}\r\n\r\nexport function findCountryCode(callingCode, nationalPhoneNumber, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\tif (metadata.isNonGeographicCallingCode(callingCode)) {\r\n\t\t\treturn '001'\r\n\t\t}\r\n\t}\r\n\t// Is always non-empty, because `callingCode` is always valid\r\n\tconst possibleCountries = metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn\r\n\t}\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possibleCountries.length === 1) {\r\n\t\treturn possibleCountries[0]\r\n\t}\r\n\treturn _findCountryCode(possibleCountries, nationalPhoneNumber, metadata.metadata)\r\n}\r\n\r\n// Changes `metadata` `country`.\r\nfunction _findCountryCode(possibleCountries, nationalPhoneNumber, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tfor (const country of possibleCountries) {\r\n\t\tmetadata.country(country)\r\n\t\t// Leading digits check would be the simplest one\r\n\t\tif (metadata.leadingDigits()) {\r\n\t\t\tif (nationalPhoneNumber &&\r\n\t\t\t\tnationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (getNumberType({ phone: nationalPhoneNumber, country }, undefined, metadata.metadata)) {\r\n\t\t\treturn country\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nfunction parseInput(text, v2) {\r\n\t// Parse RFC 3966 phone number URI.\r\n\tif (text && text.indexOf('tel:') === 0) {\r\n\t\treturn parseRFC3966(text)\r\n\t}\r\n\tlet number = extractFormattedPhoneNumber(text, v2)\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!number || !isViablePhoneNumber(number)) {\r\n\t\treturn {}\r\n\t}\r\n\t// Attempt to parse extension first, since it doesn't require region-specific\r\n\t// data and we want to have the non-normalised number here.\r\n\tconst with_extension_stripped = extractExtension(number)\r\n\tif (with_extension_stripped.ext) {\r\n\t\treturn with_extension_stripped\r\n\t}\r\n\treturn { number }\r\n}\r\n\r\n/**\r\n * Creates `parse()` result object.\r\n */\r\nfunction result(country, national_number, ext) {\r\n\tconst result = {\r\n\t\tcountry,\r\n\t\tphone : national_number\r\n\t}\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\r\nfunction parsePhoneNumber(\r\n\tformattedPhoneNumber,\r\n\tdefaultCountry,\r\n\tdefaultCallingCode,\r\n\tmetadata\r\n) {\r\n\tlet { countryCallingCode, number } = extractCountryCallingCode(\r\n\t\tformattedPhoneNumber,\r\n\t\tdefaultCountry,\r\n\t\tmetadata.metadata\r\n\t)\r\n\r\n\tlet country\r\n\r\n\tif (countryCallingCode) {\r\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode)\r\n\t}\r\n\t// If `formattedPhoneNumber` is in \"national\" format\r\n\t// then `number` is defined and `countryCallingCode` isn't.\r\n\telse if (number && (defaultCountry || defaultCallingCode)) {\r\n\t\tmetadata.selectNumberingPlan(defaultCountry, defaultCallingCode)\r\n\t\tif (defaultCountry) {\r\n\t\t\tcountry = defaultCountry\r\n\t\t} else {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tcountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcountryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata)\r\n\t}\r\n\telse return {}\r\n\r\n\tif (!number) {\r\n\t\treturn { countryCallingCode }\r\n\t}\r\n\r\n\tconst { nationalNumber, carrierCode } = parseNationalNumber(number, metadata)\r\n\r\n\t// Sometimes there are several countries\r\n\t// corresponding to the same country phone code\r\n\t// (e.g. NANPA countries all having `1` country phone code).\r\n\t// Therefore, to reliably determine the exact country,\r\n\t// national (significant) number should have been parsed first.\r\n\t//\r\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\r\n\t// get their countries populated with the full set of\r\n\t// \"phone number type\" regular expressions.\r\n\t//\r\n\tconst exactCountry = findCountryCode(countryCallingCode, nationalNumber, metadata)\r\n\tif (exactCountry) {\r\n\t\tcountry = exactCountry\r\n\t\t/* istanbul ignore if */\r\n\t\tif (exactCountry === '001') {\r\n\t\t\t// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\r\n\t\t\t// If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\r\n\t\t\t// then remove the \"istanbul ignore if\".\r\n\t\t} else {\r\n\t\t\tmetadata.country(country)\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t}\r\n}\r\n\r\nfunction parseNationalNumber(number, metadata) {\r\n\tlet nationalNumber = parseIncompletePhoneNumber(number)\r\n\tlet carrierCode\r\n\r\n\t// Parsing national prefixes and carrier codes\r\n\t// is only required for local phone numbers\r\n\t// but some people don't understand that\r\n\t// and sometimes write international phone numbers\r\n\t// with national prefixes (or maybe even carrier codes).\r\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\r\n\t// Google's original library forgives such mistakes\r\n\t// and so does this library, because it has been requested:\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\r\n\tconst {\r\n\t\tnumber: potentialNationalNumber,\r\n\t\tcarrierCode: potentialCarrierCode\r\n\t} = stripNationalPrefixAndCarrierCode(nationalNumber, metadata)\r\n\r\n\t// If metadata has \"possible lengths\" then employ the new algorythm.\r\n\tif (metadata.possibleLengths()) {\r\n\t\t// We require that the NSN remaining after stripping the national prefix and\r\n\t\t// carrier code be long enough to be a possible length for the region.\r\n\t\t// Otherwise, we don't do the stripping, since the original number could be\r\n\t\t// a valid short number.\r\n\t\tswitch (checkNumberLengthForType(potentialNationalNumber, undefined, metadata)) {\r\n\t\t\tcase 'TOO_SHORT':\r\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\tcase 'INVALID_LENGTH':\r\n\t\t\t\tbreak\r\n\t\t\tdefault:\r\n\t\t\t\tnationalNumber = potentialNationalNumber\r\n\t\t\t\tcarrierCode = potentialCarrierCode\r\n\t\t}\r\n\t} else {\r\n\t\t// If the original number (before stripping national prefix) was viable,\r\n\t\t// and the resultant number is not, then prefer the original phone number.\r\n\t\t// This is because for some countries (e.g. Russia) the same digit could be both\r\n\t\t// a national prefix and a leading digit of a valid national phone number,\r\n\t\t// like `8` is the national prefix for Russia and both\r\n\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\r\n\t\tif (matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) &&\r\n\t\t\t\t!matchesEntirely(potentialNationalNumber, metadata.nationalNumberPattern())) {\r\n\t\t\t// Keep the number without stripping national prefix.\r\n\t\t} else {\r\n\t\t\tnationalNumber = potentialNationalNumber\r\n\t\t\tcarrierCode = potentialCarrierCode\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t}\r\n}\r\n\r\n// Parses a formatted phone number\r\n// and returns `{ countryCallingCode, number }`\r\n// where `number` is just the \"number\" part\r\n// which is left after extracting `countryCallingCode`\r\n// and is not necessarily a \"national (significant) number\"\r\n// and might as well contain national prefix.\r\n//\r\nexport function extractCountryCallingCode(number, country, metadata) {\r\n\tnumber = parseIncompletePhoneNumber(number)\r\n\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// If this is not an international phone number,\r\n\t// then don't extract country phone code.\r\n\tif (number[0] !== '+') {\r\n\t\t// Convert an \"out-of-country\" dialing phone number\r\n\t\t// to a proper international phone number.\r\n\t\tconst numberWithoutIDD = stripIDDPrefix(number, country, metadata)\r\n\r\n\t\t// If an IDD prefix was stripped then\r\n\t\t// convert the number to international one\r\n\t\t// for subsequent parsing.\r\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\r\n\t\t\tnumber = '+' + numberWithoutIDD\r\n\t\t} else {\r\n\t\t\treturn { number }\r\n\t\t}\r\n\t}\r\n\r\n\t// Fast abortion: country codes do not begin with a '0'\r\n\tif (number[1] === '0') {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// The thing with country phone codes\r\n\t// is that they are orthogonal to each other\r\n\t// i.e. there's no such country phone code A\r\n\t// for which country phone code B exists\r\n\t// where B starts with A.\r\n\t// Therefore, while scanning digits,\r\n\t// if a valid country code is found,\r\n\t// that means that it is the country code.\r\n\t//\r\n\tlet i = 2\r\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\r\n\t\tconst countryCallingCode = number.slice(1, i)\r\n\t\tif (metadata.hasCallingCode(countryCallingCode)) {\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: number.slice(i)\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\treturn {}\r\n}\r\n"]},"metadata":{},"sourceType":"module"}