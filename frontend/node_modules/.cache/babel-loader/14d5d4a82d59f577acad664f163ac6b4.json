{"ast":null,"code":"var _jsxFileName = \"/Users/stuartcasarotto/Documents/family-website/src/components/TEReactTable/TEReactTable.tsx\";\nimport React from 'react';\nimport ReactTable from 'react-table'; //TODO: Rewrite for react-table v7. Features to think about:\n// Client Side Pagination\n// Client Side Sort\n// Client Size Search\n// Column Resizing\n// Easy Column / Header styling (right align)\n//\n//Additional thinks to think about adding:\n// Dynamic and locally stored active table column\n//\t- I am thinking this would use some internal hook to store\n//\t\ta list of active columns and would then dynamically\n//\t\tadjust the columns array that comes in.\n//\t- As these are adjusted store the config in local storage\n//\t- Require a unique table name used for the local config\n//\t- Maybe only locally store config if there is a name provided.\n// Ability to reorder coluns\n//\t- This would be manages and stored with the data above.\n//\t\tLikely a stringified array of the active column ids\n//\n// Look for examples to do these things and maybe doucment\n//\tthem here to prepare for the component reqrite\n\nconst showPagination = (dataArray, defaultPageSize = 10) => {\n  if (!dataArray || defaultPageSize === 1 || dataArray.length <= defaultPageSize) {\n    return false;\n  }\n\n  return true;\n}; //TODO: Fix ... actually just rebuild with v7\n\n\nexport const TEReactTable = props => {\n  return /*#__PURE__*/React.createElement(ReactTable, Object.assign({\n    showPagination: showPagination(props.data, props.defaultPageSize)\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 3\n    }\n  }));\n};\nTEReactTable.defaultProps = {\n  defaultPageSize: 10\n};","map":{"version":3,"sources":["/Users/stuartcasarotto/Documents/family-website/src/components/TEReactTable/TEReactTable.tsx"],"names":["React","ReactTable","showPagination","dataArray","defaultPageSize","length","TEReactTable","props","data","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,aAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG,CAACC,SAAD,EAAmBC,eAAe,GAAG,EAArC,KAA4C;AAClE,MAAI,CAACD,SAAD,IAAcC,eAAe,KAAK,CAAlC,IAAuCD,SAAS,CAACE,MAAV,IAAoBD,eAA/D,EAAgF;AAC/E,WAAO,KAAP;AACA;;AAED,SAAO,IAAP;AACA,CAND,C,CAQA;;;AACA,OAAO,MAAME,YAA2B,GAAIC,KAAD,IAAW;AACrD,sBACC,oBAAC,UAAD;AAAY,IAAA,cAAc,EAAEL,cAAc,CAACK,KAAK,CAACC,IAAP,EAAaD,KAAK,CAACH,eAAnB;AAA1C,KAAmFG,KAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADD;AAGA,CAJM;AAMPD,YAAY,CAACG,YAAb,GAA4B;AAC3BL,EAAAA,eAAe,EAAE;AADU,CAA5B","sourcesContent":["import React from 'react'\nimport ReactTable from 'react-table'\n\n//TODO: Rewrite for react-table v7. Features to think about:\n// Client Side Pagination\n// Client Side Sort\n// Client Size Search\n// Column Resizing\n// Easy Column / Header styling (right align)\n//\n//Additional thinks to think about adding:\n// Dynamic and locally stored active table column\n//\t- I am thinking this would use some internal hook to store\n//\t\ta list of active columns and would then dynamically\n//\t\tadjust the columns array that comes in.\n//\t- As these are adjusted store the config in local storage\n//\t- Require a unique table name used for the local config\n//\t- Maybe only locally store config if there is a name provided.\n// Ability to reorder coluns\n//\t- This would be manages and stored with the data above.\n//\t\tLikely a stringified array of the active column ids\n//\n// Look for examples to do these things and maybe doucment\n//\tthem here to prepare for the component reqrite\n\nconst showPagination = (dataArray: any[], defaultPageSize = 10) => {\n\tif (!dataArray || defaultPageSize === 1 || dataArray.length <= defaultPageSize) {\n\t\treturn false\n\t}\n\n\treturn true\n}\n\n//TODO: Fix ... actually just rebuild with v7\nexport const TEReactTable: React.FC<any> = (props) => {\n\treturn (\n\t\t<ReactTable showPagination={showPagination(props.data, props.defaultPageSize)} {...props} />\n\t)\n}\n\nTEReactTable.defaultProps = {\n\tdefaultPageSize: 10,\n}\n"]},"metadata":{},"sourceType":"module"}