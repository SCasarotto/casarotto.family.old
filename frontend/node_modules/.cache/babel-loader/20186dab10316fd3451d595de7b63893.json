{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/storage';\n//Firebase Helpers\nexport const collectionToDataObject = snapshot => {\n  if (!snapshot) {\n    return snapshot;\n  }\n\n  const data = {};\n  snapshot.forEach(doc => {\n    data[doc.id] = doc.data();\n  });\n  return data;\n};\nexport const collectionToDataArray = snapshot => {\n  if (!snapshot) {\n    return snapshot;\n  }\n\n  const data = [];\n  snapshot.forEach(doc => {\n    data.push({\n      uid: doc.id,\n      ...doc.data()\n    });\n  });\n  return data;\n};\nexport const docToDataObject = doc => {\n  if (!(doc && doc.exists)) {\n    return undefined;\n  }\n\n  return { ...doc.data(),\n    uid: doc.id\n  };\n}; //Make this generalized to accept a list of types ['array', 'object', 'set'] and then replace the use of the other colleciton unwraps\n\nexport const collectionToDataObjectAndArray = snapshot => {\n  if (!snapshot) {\n    return snapshot;\n  }\n\n  const array = [];\n  const object = {};\n  snapshot.forEach(doc => {\n    const data = { ...doc.data(),\n      uid: doc.id\n    };\n    array.push(data);\n    object[doc.id] = data;\n  });\n  return {\n    object,\n    array\n  };\n};\nexport const uploadFile = async data => {\n  const {\n    file,\n    filePath,\n    fileNumber,\n    fileCount,\n    popupFunctions\n  } = data;\n  const {\n    showNetworkActivity,\n    hideNetworkActivity\n  } = popupFunctions;\n\n  try {\n    return await new Promise((res, rej) => {\n      const {\n        name,\n        type\n      } = file;\n      const nameParts = name.split('.');\n      const fileEnding = nameParts.pop();\n      const filename = nameParts.join('.');\n      const uploadRef = `${filePath}/${filename}.${fileEnding}`;\n      const uploadTask = firebase.storage().ref(uploadRef).put(file, {\n        contentType: file.type\n      });\n      uploadTask.on('state_changed', snapshot => {\n        const {\n          bytesTransferred,\n          totalBytes\n        } = snapshot;\n        const progress = Math.round(bytesTransferred / totalBytes * 100);\n        showNetworkActivity(`Uploading File ${fileNumber && fileCount ? `${fileNumber} of ${fileCount} ` : ''}(${progress}%)...`);\n      }, e => {\n        console.log(e);\n        hideNetworkActivity();\n        return rej(e);\n      }, async () => {\n        //Complete\n        try {\n          const downloadURL = await firebase.storage().ref(uploadRef).getDownloadURL();\n          return res({\n            type,\n            fileEnding,\n            filename,\n            path: uploadRef,\n            src: downloadURL\n          });\n        } catch (e) {\n          console.log(e);\n          hideNetworkActivity();\n          return rej('Error Getting File Download URL.');\n        }\n      });\n    });\n  } catch (e) {\n    console.log(e);\n    throw new Error(e);\n  }\n};","map":{"version":3,"sources":["/Users/stuartcasarotto/Documents/family-website/src/helpers/firebaseHelper.ts"],"names":["firebase","collectionToDataObject","snapshot","data","forEach","doc","id","collectionToDataArray","push","uid","docToDataObject","exists","undefined","collectionToDataObjectAndArray","array","object","uploadFile","file","filePath","fileNumber","fileCount","popupFunctions","showNetworkActivity","hideNetworkActivity","Promise","res","rej","name","type","nameParts","split","fileEnding","pop","filename","join","uploadRef","uploadTask","storage","ref","put","contentType","on","bytesTransferred","totalBytes","progress","Math","round","e","console","log","downloadURL","getDownloadURL","path","src","Error"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/storage'\nimport { useTEPopupsFunctions } from 'react-tec'\n\n//Firebase Helpers\nexport const collectionToDataObject = (snapshot: firebase.firestore.QuerySnapshot) => {\n\tif (!snapshot) {\n\t\treturn snapshot\n\t}\n\n\tconst data: { [key: string]: any } = {}\n\tsnapshot.forEach((doc) => {\n\t\tdata[doc.id] = doc.data()\n\t})\n\treturn data\n}\nexport const collectionToDataArray = (snapshot: firebase.firestore.QuerySnapshot) => {\n\tif (!snapshot) {\n\t\treturn snapshot\n\t}\n\n\tconst data: any[] = []\n\tsnapshot.forEach((doc) => {\n\t\tdata.push({\n\t\t\tuid: doc.id,\n\t\t\t...doc.data(),\n\t\t})\n\t})\n\treturn data\n}\nexport const docToDataObject = (doc: firebase.firestore.DocumentSnapshot) => {\n\tif (!(doc && doc.exists)) {\n\t\treturn undefined\n\t}\n\n\treturn { ...doc.data(), uid: doc.id } as any\n}\n//Make this generalized to accept a list of types ['array', 'object', 'set'] and then replace the use of the other colleciton unwraps\nexport const collectionToDataObjectAndArray = (snapshot: firebase.firestore.QuerySnapshot) => {\n\tif (!snapshot) {\n\t\treturn snapshot\n\t}\n\n\tconst array: any[] = []\n\tconst object: { [key: string]: any } = {}\n\tsnapshot.forEach((doc) => {\n\t\tconst data = { ...doc.data(), uid: doc.id }\n\t\tarray.push(data)\n\t\tobject[doc.id] = data\n\t})\n\treturn { object, array }\n}\n\ninterface UploadFileData {\n\tfile: File\n\tfilePath: string\n\tfileNumber?: number\n\tfileCount?: number\n\tpopupFunctions: useTEPopupsFunctions\n}\nexport const uploadFile = async (\n\tdata: UploadFileData,\n): Promise<{ type: string; fileEnding: string; filename: string; path: string; src: string }> => {\n\tconst { file, filePath, fileNumber, fileCount, popupFunctions } = data\n\tconst { showNetworkActivity, hideNetworkActivity } = popupFunctions\n\ttry {\n\t\treturn await new Promise((res, rej) => {\n\t\t\tconst { name, type } = file\n\t\t\tconst nameParts = name.split('.')\n\t\t\tconst fileEnding = nameParts.pop()!\n\t\t\tconst filename = nameParts.join('.')\n\n\t\t\tconst uploadRef = `${filePath}/${filename}.${fileEnding}`\n\t\t\tconst uploadTask = firebase\n\t\t\t\t.storage()\n\t\t\t\t.ref(uploadRef)\n\t\t\t\t.put(file, { contentType: file.type })\n\t\t\tuploadTask.on(\n\t\t\t\t'state_changed',\n\t\t\t\t(snapshot) => {\n\t\t\t\t\tconst { bytesTransferred, totalBytes } = snapshot\n\t\t\t\t\tconst progress = Math.round((bytesTransferred / totalBytes) * 100)\n\t\t\t\t\tshowNetworkActivity(\n\t\t\t\t\t\t`Uploading File ${\n\t\t\t\t\t\t\tfileNumber && fileCount ? `${fileNumber} of ${fileCount} ` : ''\n\t\t\t\t\t\t}(${progress}%)...`,\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\t(e) => {\n\t\t\t\t\tconsole.log(e)\n\t\t\t\t\thideNetworkActivity()\n\t\t\t\t\treturn rej(e)\n\t\t\t\t},\n\t\t\t\tasync () => {\n\t\t\t\t\t//Complete\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst downloadURL = await firebase\n\t\t\t\t\t\t\t.storage()\n\t\t\t\t\t\t\t.ref(uploadRef)\n\t\t\t\t\t\t\t.getDownloadURL()\n\n\t\t\t\t\t\treturn res({\n\t\t\t\t\t\t\ttype,\n\t\t\t\t\t\t\tfileEnding,\n\t\t\t\t\t\t\tfilename,\n\t\t\t\t\t\t\tpath: uploadRef,\n\t\t\t\t\t\t\tsrc: downloadURL,\n\t\t\t\t\t\t})\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.log(e)\n\t\t\t\t\t\thideNetworkActivity()\n\t\t\t\t\t\treturn rej('Error Getting File Download URL.')\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t)\n\t\t})\n\t} catch (e) {\n\t\tconsole.log(e)\n\t\tthrow new Error(e)\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}