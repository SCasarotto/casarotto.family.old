{"ast":null,"code":"var _jsxFileName = \"/Users/stuartcasarotto/Documents/family-website/src/pages/front/RSVP/RSVP.tsx\";\nimport React, { useState } from 'react';\nimport { // TEForm,\nTEInputRow // TESelectRow,\n, TETextareaRow, TEButton, useTEPopups, TESegmentedGroup } from 'react-tec';\nimport { PageWrapper } from 'components';\nimport { Header, HeaderContent, HeaderTitle, RSVPSection, RSVPContainer, RSVPTitle, RSVPCopy, MessageSection, MessageContainer, MessageTitle, MessageCopy, MessageForm, MessageBoardWrapper, MessageBoardItem, MessageBoardMessage, MessageBoardName } from './styledComponents';\nimport {\n/*saveRSVP,*/\nsaveMessage } from './requests';\nimport { useMessages } from 'pages/admin/Messages/hooks';\nexport const RSVP = () => {\n  const popupFunctions = useTEPopups();\n  const {\n    messageArray\n  } = useMessages(); // const [rsvpName, setRSVPName] = useState('')\n  // const [rsvpFood, setRSVPFood] = useState<{ value: string; label: string }>()\n  // const [rsvpComment, setRSVPComment] = useState('')\n\n  const [messageName, setMessageName] = useState('');\n  const [messageMessage, setMessageMessage] = useState('');\n  const [showMessage, setShowMessage] = useState('Displayed publicly on the website.'); // const handleSubmitRSVP = async (e: React.FormEvent<HTMLFormElement>) => {\n  // \te.preventDefault()\n  // \ttry {\n  // \t\tconst data = {\n  // \t\t\tname: rsvpName,\n  // \t\t\tfoodChoice: rsvpFood,\n  // \t\t\tcomment: rsvpComment,\n  // \t\t\tpopupFunctions,\n  // \t\t}\n  // \t\tawait saveRSVP(data)\n  // \t\tsetRSVPName('')\n  // \t\tsetRSVPFood(undefined)\n  // \t\tsetRSVPComment('')\n  // \t} catch (e) {\n  // \t\tconsole.log(e)\n  // \t}\n  // }\n\n  const handleSubmitMessgae = async e => {\n    e.preventDefault();\n\n    try {\n      const data = {\n        name: messageName,\n        message: messageMessage,\n        showMessage,\n        popupFunctions\n      };\n      await saveMessage(data);\n      setMessageName('');\n      setMessageMessage('');\n      setShowMessage('Displayed publicly on the website.');\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return React.createElement(PageWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(HeaderContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, React.createElement(HeaderTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, \"We hope to see you there\"))), React.createElement(RSVPSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(RSVPContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(RSVPTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"RSVP\"), React.createElement(RSVPCopy, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Once invitations go out, you can return to this page and submit your RSVP.\"))), React.createElement(MessageSection, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(MessageContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(MessageTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"Leave Us A Message\"), React.createElement(MessageCopy, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, \"We would love to hear from you before or after the wedding.\"), React.createElement(MessageForm, {\n    onSubmit: handleSubmitMessgae,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(TEInputRow, {\n    labelForKey: \"measageName\",\n    title: \"Name\",\n    value: messageName,\n    onChange: e => setMessageName(e.target.value),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }), React.createElement(TETextareaRow, {\n    labelForKey: \"messageMessage\",\n    title: \"Message\",\n    value: messageMessage,\n    onChange: e => setMessageMessage(e.target.value),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }), React.createElement(TESegmentedGroup, {\n    labelForKey: \"editPublic\",\n    title: \"I would like my message:\",\n    buttonArray: ['Displayed publicly on the website.', 'Sent privately to the couple.'],\n    checkedValue: showMessage,\n    onChange: e => setShowMessage(e.target.value),\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }), React.createElement(TEButton, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \"Submit\")), React.createElement(MessageBoardWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, messageArray && messageArray.map(m => {\n    const {\n      uid,\n      createdBy,\n      message\n    } = m;\n    return React.createElement(MessageBoardItem, {\n      key: uid,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(MessageBoardMessage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, message), React.createElement(MessageBoardName, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, createdBy));\n  })))));\n};","map":{"version":3,"sources":["/Users/stuartcasarotto/Documents/family-website/src/pages/front/RSVP/RSVP.tsx"],"names":["React","useState","TEInputRow","TETextareaRow","TEButton","useTEPopups","TESegmentedGroup","PageWrapper","Header","HeaderContent","HeaderTitle","RSVPSection","RSVPContainer","RSVPTitle","RSVPCopy","MessageSection","MessageContainer","MessageTitle","MessageCopy","MessageForm","MessageBoardWrapper","MessageBoardItem","MessageBoardMessage","MessageBoardName","saveMessage","useMessages","RSVP","popupFunctions","messageArray","messageName","setMessageName","messageMessage","setMessageMessage","showMessage","setShowMessage","handleSubmitMessgae","e","preventDefault","data","name","message","console","log","target","value","map","m","uid","createdBy"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport {\n\t// TEForm,\n\tTEInputRow,\n\t// TESelectRow,\n\tTETextareaRow,\n\tTEButton,\n\tuseTEPopups,\n\tTESegmentedGroup,\n} from 'react-tec'\n\nimport { PageWrapper } from 'components'\n\nimport {\n\tHeader,\n\tHeaderContent,\n\tHeaderTitle,\n\tRSVPSection,\n\tRSVPContainer,\n\tRSVPTitle,\n\tRSVPCopy,\n\tMessageSection,\n\tMessageContainer,\n\tMessageTitle,\n\tMessageCopy,\n\tMessageForm,\n\tMessageBoardWrapper,\n\tMessageBoardItem,\n\tMessageBoardMessage,\n\tMessageBoardName,\n} from './styledComponents'\nimport { /*saveRSVP,*/ saveMessage } from './requests'\nimport { useMessages } from 'pages/admin/Messages/hooks'\n\nexport const RSVP = () => {\n\tconst popupFunctions = useTEPopups()\n\tconst { messageArray } = useMessages()\n\t// const [rsvpName, setRSVPName] = useState('')\n\t// const [rsvpFood, setRSVPFood] = useState<{ value: string; label: string }>()\n\t// const [rsvpComment, setRSVPComment] = useState('')\n\n\tconst [messageName, setMessageName] = useState('')\n\tconst [messageMessage, setMessageMessage] = useState('')\n\tconst [showMessage, setShowMessage] = useState('Displayed publicly on the website.')\n\n\t// const handleSubmitRSVP = async (e: React.FormEvent<HTMLFormElement>) => {\n\t// \te.preventDefault()\n\t// \ttry {\n\t// \t\tconst data = {\n\t// \t\t\tname: rsvpName,\n\t// \t\t\tfoodChoice: rsvpFood,\n\t// \t\t\tcomment: rsvpComment,\n\t// \t\t\tpopupFunctions,\n\t// \t\t}\n\t// \t\tawait saveRSVP(data)\n\t// \t\tsetRSVPName('')\n\t// \t\tsetRSVPFood(undefined)\n\t// \t\tsetRSVPComment('')\n\t// \t} catch (e) {\n\t// \t\tconsole.log(e)\n\t// \t}\n\t// }\n\tconst handleSubmitMessgae = async (e: React.FormEvent<HTMLFormElement>) => {\n\t\te.preventDefault()\n\t\ttry {\n\t\t\tconst data = {\n\t\t\t\tname: messageName,\n\t\t\t\tmessage: messageMessage,\n\t\t\t\tshowMessage,\n\t\t\t\tpopupFunctions,\n\t\t\t}\n\t\t\tawait saveMessage(data)\n\t\t\tsetMessageName('')\n\t\t\tsetMessageMessage('')\n\t\t\tsetShowMessage('Displayed publicly on the website.')\n\t\t} catch (e) {\n\t\t\tconsole.log(e)\n\t\t}\n\t}\n\n\treturn (\n\t\t<PageWrapper>\n\t\t\t<Header>\n\t\t\t\t<HeaderContent>\n\t\t\t\t\t<HeaderTitle>We hope to see you there</HeaderTitle>\n\t\t\t\t</HeaderContent>\n\t\t\t</Header>\n\t\t\t<RSVPSection>\n\t\t\t\t<RSVPContainer>\n\t\t\t\t\t<RSVPTitle>RSVP</RSVPTitle>\n\t\t\t\t\t{/* <RSVPCopy>\n\t\t\t\t\t\tWe are excited to have you at our wedding. Please RSVP below so we know you\n\t\t\t\t\t\twill be joining us and what you will be eating.\n\t\t\t\t\t</RSVPCopy> */}\n\t\t\t\t\t<RSVPCopy>\n\t\t\t\t\t\tOnce invitations go out, you can return to this page and submit your RSVP.\n\t\t\t\t\t</RSVPCopy>\n\t\t\t\t\t{/* <TEForm onSubmit={handleSubmitRSVP}>\n\t\t\t\t\t\t<TEInputRow\n\t\t\t\t\t\t\tlabelForKey='rsvpName'\n\t\t\t\t\t\t\ttitle='Name'\n\t\t\t\t\t\t\tvalue={rsvpName}\n\t\t\t\t\t\t\tonChange={(e) => setRSVPName(e.target.value)}\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\trowSize='half'\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TESelectRow\n\t\t\t\t\t\t\tlabelForKey='rsvpFood'\n\t\t\t\t\t\t\ttitle='Food Choice'\n\t\t\t\t\t\t\tvalue={rsvpFood}\n\t\t\t\t\t\t\toptions={[\n\t\t\t\t\t\t\t\t{ label: 'Prime Rib', value: 'Prime Rib' },\n\t\t\t\t\t\t\t\t{ label: 'Chicken', value: 'Chicken' },\n\t\t\t\t\t\t\t\t{ label: 'Fish', value: 'Fish' },\n\t\t\t\t\t\t\t\t{ label: 'Pasta', value: 'Pasta' },\n\t\t\t\t\t\t\t\t{ label: 'Mac and Cheese', value: 'Mac and Cheese' },\n\t\t\t\t\t\t\t\t{ label: 'Other (please leave a comment below)', value: 'other' },\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\tonChange={(option) =>\n\t\t\t\t\t\t\t\tsetRSVPFood(option as undefined | { value: string; label: string })\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\trowSize='half'\n\t\t\t\t\t\t\tlast\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TETextareaRow\n\t\t\t\t\t\t\tlabelForKey='rsvpComment'\n\t\t\t\t\t\t\ttitle='Diatary Restrictions or Other Comments'\n\t\t\t\t\t\t\tvalue={rsvpComment}\n\t\t\t\t\t\t\tonChange={(e) => setRSVPComment(e.target.value)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TEButton type='submit'>Submit</TEButton>\n\t\t\t\t\t</TEForm> */}\n\t\t\t\t</RSVPContainer>\n\t\t\t</RSVPSection>\n\t\t\t<MessageSection>\n\t\t\t\t<MessageContainer>\n\t\t\t\t\t<MessageTitle>Leave Us A Message</MessageTitle>\n\t\t\t\t\t<MessageCopy>\n\t\t\t\t\t\tWe would love to hear from you before or after the wedding.\n\t\t\t\t\t</MessageCopy>\n\t\t\t\t\t<MessageForm onSubmit={handleSubmitMessgae}>\n\t\t\t\t\t\t<TEInputRow\n\t\t\t\t\t\t\tlabelForKey='measageName'\n\t\t\t\t\t\t\ttitle='Name'\n\t\t\t\t\t\t\tvalue={messageName}\n\t\t\t\t\t\t\tonChange={(e) => setMessageName(e.target.value)}\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TETextareaRow\n\t\t\t\t\t\t\tlabelForKey='messageMessage'\n\t\t\t\t\t\t\ttitle='Message'\n\t\t\t\t\t\t\tvalue={messageMessage}\n\t\t\t\t\t\t\tonChange={(e) => setMessageMessage(e.target.value)}\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TESegmentedGroup\n\t\t\t\t\t\t\tlabelForKey='editPublic'\n\t\t\t\t\t\t\ttitle='I would like my message:'\n\t\t\t\t\t\t\tbuttonArray={[\n\t\t\t\t\t\t\t\t'Displayed publicly on the website.',\n\t\t\t\t\t\t\t\t'Sent privately to the couple.',\n\t\t\t\t\t\t\t]}\n\t\t\t\t\t\t\tcheckedValue={showMessage}\n\t\t\t\t\t\t\tonChange={(e) => setShowMessage(e.target.value)}\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<TEButton type='submit'>Submit</TEButton>\n\t\t\t\t\t</MessageForm>\n\t\t\t\t\t<MessageBoardWrapper>\n\t\t\t\t\t\t{messageArray &&\n\t\t\t\t\t\t\tmessageArray.map((m) => {\n\t\t\t\t\t\t\t\tconst { uid, createdBy, message } = m\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<MessageBoardItem key={uid}>\n\t\t\t\t\t\t\t\t\t\t<MessageBoardMessage>{message}</MessageBoardMessage>\n\t\t\t\t\t\t\t\t\t\t<MessageBoardName>{createdBy}</MessageBoardName>\n\t\t\t\t\t\t\t\t\t</MessageBoardItem>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t</MessageBoardWrapper>\n\t\t\t\t</MessageContainer>\n\t\t\t</MessageSection>\n\t\t</PageWrapper>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}