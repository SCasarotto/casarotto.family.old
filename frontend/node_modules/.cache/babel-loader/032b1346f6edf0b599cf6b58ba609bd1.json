{"ast":null,"code":"//TODO: Improve\nexport var customTableFilter=function customTableFilter(filter,row,column){//TODO: Update and write tests\nvar id=filter.pivotId||filter.id;var rowValue=row[id];if(rowValue!==null&&(typeof rowValue==='string'||typeof rowValue==='number')){return row[id]!==undefined?String(rowValue).toLowerCase().includes(filter.value.toLowerCase()):true;}return false;};export var filterDateColumn=function filterDateColumn(dateFormatFunction,filter,rows){//TODO: Update and write tests\nvar id=filter.pivotId||filter.id;var rowValue=rows[id];if(rowValue){var dateString=dateFormatFunction(rowValue);return dateString.toLowerCase().includes(filter.value.toLowerCase());}return false;};","map":{"version":3,"sources":["/Users/stuartcasarotto/Documents/family-website/src/helpers/tableHelper.ts"],"names":["customTableFilter","filter","row","column","id","pivotId","rowValue","undefined","String","toLowerCase","includes","value","filterDateColumn","dateFormatFunction","rows","dateString"],"mappings":"AAEA;AACA,MAAO,IAAMA,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,MAAD,CAAiBC,GAAjB,CAA2BC,MAA3B,CAAoD,CACpF;AACA,GAAMC,CAAAA,EAAE,CAAGH,MAAM,CAACI,OAAP,EAAkBJ,MAAM,CAACG,EAApC,CACA,GAAME,CAAAA,QAAQ,CAAGJ,GAAG,CAACE,EAAD,CAApB,CAEA,GAAIE,QAAQ,GAAK,IAAb,GAAsB,MAAOA,CAAAA,QAAP,GAAoB,QAApB,EAAgC,MAAOA,CAAAA,QAAP,GAAoB,QAA1E,CAAJ,CAAyF,CACxF,MAAOJ,CAAAA,GAAG,CAACE,EAAD,CAAH,GAAYG,SAAZ,CACJC,MAAM,CAACF,QAAD,CAAN,CACCG,WADD,GAECC,QAFD,CAEUT,MAAM,CAACU,KAAP,CAAaF,WAAb,EAFV,CADI,CAIJ,IAJH,CAKA,CACD,MAAO,MAAP,CACA,CAbM,CAeP,MAAO,IAAMG,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAC/BC,kBAD+B,CAE/BZ,MAF+B,CAG/Ba,IAH+B,CAI3B,CACJ;AACA,GAAMV,CAAAA,EAAE,CAAGH,MAAM,CAACI,OAAP,EAAkBJ,MAAM,CAACG,EAApC,CACA,GAAME,CAAAA,QAAQ,CAAGQ,IAAI,CAACV,EAAD,CAArB,CAEA,GAAIE,QAAJ,CAAc,CACb,GAAMS,CAAAA,UAAU,CAAGF,kBAAkB,CAACP,QAAD,CAArC,CACA,MAAOS,CAAAA,UAAU,CAACN,WAAX,GAAyBC,QAAzB,CAAkCT,MAAM,CAACU,KAAP,CAAaF,WAAb,EAAlC,CAAP,CACA,CACD,MAAO,MAAP,CACA,CAdM","sourcesContent":["import { Filter } from 'react-table'\n\n//TODO: Improve\nexport const customTableFilter = (filter: Filter, row: any, column: any): boolean => {\n\t//TODO: Update and write tests\n\tconst id = filter.pivotId || filter.id\n\tconst rowValue = row[id]\n\n\tif (rowValue !== null && (typeof rowValue === 'string' || typeof rowValue === 'number')) {\n\t\treturn row[id] !== undefined\n\t\t\t? String(rowValue)\n\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t.includes(filter.value.toLowerCase())\n\t\t\t: true\n\t}\n\treturn false\n}\n\nexport const filterDateColumn = (\n\tdateFormatFunction: (value: number | Date | undefined | null) => string,\n\tfilter: any,\n\trows: any[],\n) => {\n\t//TODO: Update and write tests\n\tconst id = filter.pivotId || filter.id\n\tconst rowValue = rows[id]\n\n\tif (rowValue) {\n\t\tconst dateString = dateFormatFunction(rowValue)\n\t\treturn dateString.toLowerCase().includes(filter.value.toLowerCase())\n\t}\n\treturn false\n}\n"]},"metadata":{},"sourceType":"module"}